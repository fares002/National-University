version: '3.8'

services:
  # Redis cache service
  redis:
    image: redis:7-alpine
    container_name: national-university-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    environment:
      TZ: "Africa/Cairo"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - app-network

  # Backend API service
  backend:
    build:
      context: ./National-Universty-Backend
      dockerfile: Dockerfile
    container_name: national-university-backend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      # Timezone Configuration
      TZ: "Africa/Cairo"
      
      # Database Configuration (local database on host)
      # Use host.docker.internal to connect to host machine database on Windows/Mac
      # For Linux, use: extra_hosts: - "host.docker.internal:host-gateway"
      DATABASE_URL: "${DATABASE_URL:-mysql://National_university_admin:National_university_password@host.docker.internal:3306/National_university}"
      
      # JWT Configuration
      JWT_SECRET_KEY: "${JWT_SECRET_KEY:-05b7847d5caa00b0f4a05fc8e4e773583211628f5e838b267efc35dee5a069dd}"
      JWT_EXPIRES_IN: "${JWT_EXPIRES_IN:-7d}"
      
      # Session Configuration
      SESSION_SECRET: "${SESSION_SECRET:-your-super-secret-session-key-change-this-in-production}"
      
      # Server Configuration
      PORT: 3000
      NODE_ENV: "${NODE_ENV:-production}"
      
      # CORS Configuration
      CORS_ORIGINS: "http://localhost,http://localhost:80"
      CLIENT_URL: "http://localhost"
      
      # Redis Configuration (using containerized Redis)
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: "${REDIS_PASSWORD:-}"
      
      # Email Configuration
      EMAIL_SERVICE: "${EMAIL_SERVICE:-gmail}"
      EMAIL_USER: "${EMAIL_USER}"
      EMAIL_PASSWORD: "${EMAIL_PASSWORD}"
      
      # Google OAuth
      GOOGLE_CLIENT_ID: "${GOOGLE_CLIENT_ID:-}"
      GOOGLE_CLIENT_SECRET: "${GOOGLE_CLIENT_SECRET:-}"
      GOOGLE_CALLBACK_URL: "${GOOGLE_CALLBACK_URL:-http://localhost:3000/auth/google/callback}"
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/v1/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app-network
    # For Linux hosts, uncomment the following to enable host.docker.internal
    # extra_hosts:
    #   - "host.docker.internal:host-gateway"

  # Frontend service
  frontend:
    build:
      context: ./sudani-fin-flow
      dockerfile: Dockerfile
    container_name: national-university-frontend
    restart: unless-stopped
    ports:
      - "80:80"
    environment:
      # Timezone Configuration
      TZ: "Africa/Cairo"
      # API URL will be baked into the build
      VITE_API_BASE_URL: "${VITE_API_BASE_URL:-http://localhost:3000/api/v1}"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 5s
    networks:
      - app-network

volumes:
  redis_data:
    driver: local

networks:
  app-network:
    driver: bridge
